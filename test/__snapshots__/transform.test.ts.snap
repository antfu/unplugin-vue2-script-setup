// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`transform fixture DynamicStyle.vue 1`] = `
"<template>
  <div :style=\\"{ color, border: '1px' }\\" />
</template>

<script lang=\\"ts\\">
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const color = computed(() => 'red');
  return {
    color
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform fixture Empty.vue 1`] = `""`;

exports[`transform fixture Macros.vue 1`] = `
"<template>
  <div @click=\\"emit(props.msg)\\">{{ msg }}</div>
</template>

<script lang=\\"js\\">
const __sfc_main = {};
__sfc_main.props = {
  msg: String
};

__sfc_main.setup = (__props, __ctx) => {
  const props = __props;
  const emit = __ctx.emit;
  return {
    props,
    emit
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform fixture MacrosPure.vue 1`] = `
"<template>
  <div>{{ msg }}</div>
</template>

<script >
const __sfc_main = {};
__sfc_main.props = {
  msg: String
};
export default __sfc_main;
</script>
"
`;

exports[`transform fixture MacrosType.vue 1`] = `
"<template>
  <div @click=\\"emit(props.msg)\\">
    {{ msg }}
  </div>
</template>

<script lang=\\"ts\\">
const __sfc_main = {};
__sfc_main.props = {
  msg: {
    key: \\"msg\\",
    required: false,
    type: [String],
    default: 'Hello'
  },
  value: {
    key: \\"value\\",
    required: true,
    type: [Number, String]
  },
  data: {
    key: \\"data\\",
    required: false,
    type: [Object]
  }
};

__sfc_main.setup = (__props, __ctx) => {
  const props = __props;
  const emit = __ctx.emit;
  return {
    props,
    emit
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform fixture MacrosType2.vue 1`] = `
"<template>
  <div @click=\\"emit(props.msg)\\">
    {{ msg }}
  </div>
</template>

<script lang=\\"ts\\">
export interface Props {
  msg: string;
  value: number | string;
  data?: {
    value: boolean;
  };
  arr?: [number, string, {}];
  any: any;
}
const __sfc_main = {};
__sfc_main.props = {
  msg: {
    key: \\"msg\\",
    required: false,
    type: [String],
    default: 'Hello'
  },
  value: {
    key: \\"value\\",
    required: true,
    type: [Number, String]
  },
  data: {
    key: \\"data\\",
    required: false,
    type: [Object]
  },
  arr: {
    key: \\"arr\\",
    required: false,
    type: [Array]
  },
  any: {
    key: \\"any\\",
    required: true,
    type: [null]
  }
};

__sfc_main.setup = (__props, __ctx) => {
  const props = __props;
  const emit = __ctx.emit;
  return {
    props,
    emit
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform fixture Object1.vue 1`] = `
"<template>
  <div>
    {{ data }} {{ title }}
  </div>
</template>

<script lang=\\"ts\\">
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const data = {
    title: 'Template Only'
  };
  return {
    data
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform fixture ObjectDestructure.vue 1`] = `
"<template>
  <div></div>
</template>

<script >
import { toRefs, reactive } from 'vue';
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const state = reactive({
    data: 'hello'
  });
  const {
    data
  } = toRefs(state);
  return {};
};

export default __sfc_main;
</script>
"
`;

exports[`transform fixture RefSugar.ts 1`] = `
"import { ref as _ref, computed as _computed } from '@vue/composition-api'
let ref1 = (ref('hello'))
ref1.value = 'world'
const ref1Raw = (ref1)

let ref2 = _ref('hello')
ref2.value = 'world'
const ref2Raw = (ref2)

let computed1 = _computed(() => ref2.value += ' str')
const computed1Raw = (computed1)
"
`;

exports[`transform fixture RefSugar.vue 1`] = `
"<template>
  <div>
    {{ msg }}
    {{ msg2 }}
  </div>
</template>



<script lang=\\"ts\\">
import { ref as _ref } from \\"@vue/composition-api\\";

/* eslint-disable prefer-const */
import { defineComponent, ref } from '@vue/composition-api';

const __sfc_main = defineComponent({
  setup() {
    let msg = ref('hello world');
    return {
      msg: msg.value
    };
  }

});

__sfc_main.setup = (__props, __ctx) => {
  let msg2 = _ref('hello world');

  return {
    msg2
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform fixture RefSugarScriptSetup.vue 1`] = `
"<template>
  <div>
    {{ msg }}
  </div>
</template>

<script lang=\\"ts\\">
import { ref as _ref } from \\"@vue/composition-api\\";
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  /* eslint-disable prefer-const */
  let msg = _ref('hello world');

  return {
    msg
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform fixture ScriptOnly.vue 1`] = `
"<script lang=\\"ts\\">
import { defineComponent } from '@vue/composition-api';

const __sfc_main = defineComponent({
  name: 'Hi'
});

export default __sfc_main;
</script>

"
`;

exports[`transform fixture TemplateOnly.vue 1`] = `
"<template>
  <div>
    <div v-for=\\"(item, index) in items\\" :key=\\"item\\">
      {{ index }}: {{ item }}
    </div>
  </div>
</template>

<script lang=\\"ts\\">
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const items = [{
    name: 'Item 1',
    value: 1
  }, {
    name: 'Item 2',
    value: 2
  }, {
    name: 'Item 3',
    value: 3
  }, {
    name: 'Item 4',
    value: 4
  }];
  return {
    items
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform fixture VFor.vue 1`] = `
"<template>
  <div>
    <div v-for=\\"(item, index) in items\\" :key=\\"item\\">
      {{ item }}
    </div>
    <div v-for=\\"{ cargo_key, in_of } in items2\\">
      {{ cargo_key }}
    </div>
  </div>
</template>

<script lang=\\"ts\\">
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  const items = [{
    name: 'Item 1',
    value: 1
  }, {
    name: 'Item 2',
    value: 2
  }, {
    name: 'Item 3',
    value: 3
  }, {
    name: 'Item 4',
    value: 4
  }];
  const items2 = [{
    cargo_key: 'cargo_key',
    in_of: 'in'
  }];
  const index = 0;
  return {
    items,
    items2
  };
};

export default __sfc_main;
</script>
"
`;

exports[`transform playground App.vue 1`] = `
"<template>
  <div>
    <hello-world name=\\"Vue 2\\" @update=\\"onUpdate\\" />
  </div>
</template>

<script lang=\\"ts\\">
import HelloWorld from './HelloWorld.vue';
const __sfc_main = {};

__sfc_main.setup = (__props, __ctx) => {
  function onUpdate(e: any) {
    console.log(e);
  }

  return {
    onUpdate
  };
};

__sfc_main.components = Object.assign({
  HelloWorld
}, __sfc_main.components);
export default __sfc_main;
</script>
"
`;

exports[`transform playground Bar.vue 1`] = `
"<template>
  <div>Bar</div>
</template>
"
`;

exports[`transform playground Foo.vue 1`] = `
"<template>
  <div>Foo</div>
</template>
"
`;

exports[`transform playground HelloWorld.vue 1`] = `
"<template>
  <div>
    <h3>{{ msg }}, {{ name }}</h3>
    <button @click=\\"inc\\">
      Inc
    </button>
    <div>{{ count }} x 2 = {{ doubled }}</div>
    <button @click=\\"dec()\\" v-html=\\"decText\\" />
    <component :is=\\"count > 2 ? Foo : Bar\\" />
  </div>
</template>

<script lang=\\"ts\\">
import { ref, computed, watch } from '@vue/composition-api';
import Foo from './Foo.vue';
import Bar from './Bar.vue';
const __sfc_main = {
  name: 'App'
};
__sfc_main.props = {
  msg: {
    key: \\"msg\\",
    required: false,
    type: [String],
    default: 'Hello'
  },
  name: {
    key: \\"name\\",
    required: true,
    type: [String, Number]
  }
};

__sfc_main.setup = (__props, __ctx) => {
  const props = __props;
  const emit = __ctx.emit;
  const count = ref(0);
  const doubled = computed(() => count.value * 2);

  function inc() {
    count.value += 1;
  }

  function dec() {
    count.value -= 1;
  }

  const decText = '<b>Dec</b>';
  watch(count, value => emit('update', value));
  return {
    Foo,
    Bar,
    count,
    doubled,
    inc,
    dec,
    decText
  };
};

export default __sfc_main;
</script>


"
`;
